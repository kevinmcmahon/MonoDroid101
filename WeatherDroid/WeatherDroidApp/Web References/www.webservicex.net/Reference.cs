// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace WeatherDroidApp.www.webservicex.net {
    
    
    /// <remarks/>
    /// <remarks>
///Get one week weather forecast for valid zip code or Place name in USA
///</remarks>
    [System.Web.Services.WebServiceBinding(Name="WeatherForecastSoap", Namespace="http://www.webservicex.net")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WeatherForecast : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetWeatherByZipCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWeatherByPlaceNameOperationCompleted;
        
        public WeatherForecast() {
            this.Url = "http://www.webservicex.net/WeatherForecast.asmx";
        }
        
        public WeatherForecast(string url) {
            this.Url = url;
        }
        
        public event GetWeatherByZipCodeCompletedEventHandler GetWeatherByZipCodeCompleted;
        
        public event GetWeatherByPlaceNameCompletedEventHandler GetWeatherByPlaceNameCompleted;
        
        /// <remarks>
///Get one week weather forecast for a valid Zip Code(USA)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webservicex.net/GetWeatherByZipCode", RequestNamespace="http://www.webservicex.net", ResponseNamespace="http://www.webservicex.net", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public WeatherForecasts GetWeatherByZipCode(string ZipCode) {
            object[] results = this.Invoke("GetWeatherByZipCode", new object[] {
                        ZipCode});
            return ((WeatherForecasts)(results[0]));
        }
        
        public System.IAsyncResult BeginGetWeatherByZipCode(string ZipCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWeatherByZipCode", new object[] {
                        ZipCode}, callback, asyncState);
        }
        
        public WeatherForecasts EndGetWeatherByZipCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WeatherForecasts)(results[0]));
        }
        
        public void GetWeatherByZipCodeAsync(string ZipCode) {
            this.GetWeatherByZipCodeAsync(ZipCode, null);
        }
        
        public void GetWeatherByZipCodeAsync(string ZipCode, object userState) {
            if ((this.GetWeatherByZipCodeOperationCompleted == null)) {
                this.GetWeatherByZipCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWeatherByZipCodeCompleted);
            }
            this.InvokeAsync("GetWeatherByZipCode", new object[] {
                        ZipCode}, this.GetWeatherByZipCodeOperationCompleted, userState);
        }
        
        private void OnGetWeatherByZipCodeCompleted(object arg) {
            if ((this.GetWeatherByZipCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWeatherByZipCodeCompleted(this, new GetWeatherByZipCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks>
///Get one week  weather forecast for a place name(USA)
///</remarks>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.webservicex.net/GetWeatherByPlaceName", RequestNamespace="http://www.webservicex.net", ResponseNamespace="http://www.webservicex.net", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
        public WeatherForecasts GetWeatherByPlaceName(string PlaceName) {
            object[] results = this.Invoke("GetWeatherByPlaceName", new object[] {
                        PlaceName});
            return ((WeatherForecasts)(results[0]));
        }
        
        public System.IAsyncResult BeginGetWeatherByPlaceName(string PlaceName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWeatherByPlaceName", new object[] {
                        PlaceName}, callback, asyncState);
        }
        
        public WeatherForecasts EndGetWeatherByPlaceName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WeatherForecasts)(results[0]));
        }
        
        public void GetWeatherByPlaceNameAsync(string PlaceName) {
            this.GetWeatherByPlaceNameAsync(PlaceName, null);
        }
        
        public void GetWeatherByPlaceNameAsync(string PlaceName, object userState) {
            if ((this.GetWeatherByPlaceNameOperationCompleted == null)) {
                this.GetWeatherByPlaceNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWeatherByPlaceNameCompleted);
            }
            this.InvokeAsync("GetWeatherByPlaceName", new object[] {
                        PlaceName}, this.GetWeatherByPlaceNameOperationCompleted, userState);
        }
        
        private void OnGetWeatherByPlaceNameCompleted(object arg) {
            if ((this.GetWeatherByPlaceNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWeatherByPlaceNameCompleted(this, new GetWeatherByPlaceNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.webservicex.net")]
    public partial class WeatherForecasts {
        
        /// <remarks/>
        public float Latitude;
        
        /// <remarks/>
        public float Longitude;
        
        /// <remarks/>
        public float AllocationFactor;
        
        /// <remarks/>
        public string FipsCode;
        
        /// <remarks/>
        public string PlaceName;
        
        /// <remarks/>
        public string StateCode;
        
        /// <remarks/>
        public string Status;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItem(IsNullable=false)]
        public WeatherData[] Details;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.webservicex.net")]
    public partial class WeatherData {
        
        /// <remarks/>
        public string Day;
        
        /// <remarks/>
        public string WeatherImage;
        
        /// <remarks/>
        public string MaxTemperatureF;
        
        /// <remarks/>
        public string MinTemperatureF;
        
        /// <remarks/>
        public string MaxTemperatureC;
        
        /// <remarks/>
        public string MinTemperatureC;
    }
    
    public partial class GetWeatherByZipCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWeatherByZipCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WeatherForecasts Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherForecasts)(this.results[0]));
            }
        }
    }
    
    public delegate void GetWeatherByZipCodeCompletedEventHandler(object sender, GetWeatherByZipCodeCompletedEventArgs args);
    
    public partial class GetWeatherByPlaceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWeatherByPlaceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WeatherForecasts Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherForecasts)(this.results[0]));
            }
        }
    }
    
    public delegate void GetWeatherByPlaceNameCompletedEventHandler(object sender, GetWeatherByPlaceNameCompletedEventArgs args);
}
